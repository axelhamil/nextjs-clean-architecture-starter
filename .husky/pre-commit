#!/bin/sh

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Utility functions
print_header() {
    echo "\n${BOLD}${BLUE}════════════════════════════════════════════${NC}"
    echo "${BOLD}${BLUE}   🔍 PRE-COMMIT CHECKS STARTED${NC}"
    echo "${BOLD}${BLUE}════════════════════════════════════════════${NC}\n"
}

print_section() {
    echo "${CYAN}▶ $1...${NC}"
}

print_success() {
    echo "${GREEN}✓ $1${NC}"
}

print_error() {
    echo "${RED}✕ $1${NC}\n"
    echo "${RED}Command output:${NC}\n$2"
}

print_warning() {
    echo "${YELLOW}⚠ $1${NC}"
}

print_footer() {
    if [ $1 -eq 0 ]; then
        echo "\n${BOLD}${GREEN}════════════════════════════════════════════${NC}"
        echo "${BOLD}${GREEN}   ✅ ALL PRE-COMMIT CHECKS PASSED${NC}"
        echo "${BOLD}${GREEN}════════════════════════════════════════════${NC}\n"
    else
        echo "\n${BOLD}${RED}════════════════════════════════════════════${NC}"
        echo "${BOLD}${RED}   ❌ PRE-COMMIT CHECKS FAILED${NC}"
        echo "${BOLD}${RED}════════════════════════════════════════════${NC}\n"
    fi
}

# Function to run command and capture output
run_command() {
    local command_output
    command_output=$($1 2>&1)
    local exit_code=$?
    
    if [ $exit_code -eq 0 ]; then
        print_success "[$2] $3"
        return 0
    else
        print_error "[$2] $4" "$command_output"
        print_footer 1
        return 1
    fi
}

# Start script
print_header

# Get current timestamp
TIMESTAMP=$(date '+%H:%M:%S')

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.(ts|tsx|js|jsx)$' | tr '\n' ' ')

if [ -z "$STAGED_FILES" ]; then
    print_warning "[$TIMESTAMP] No relevant files to check"
    print_footer 0
    exit 0
fi

print_warning "[$TIMESTAMP] Found staged files to check"

# Format check
print_section "Checking code format"
run_command "pnpm format" "$TIMESTAMP" \
    "Code formatting is valid" \
    "Code formatting failed" || exit 1

# Type check (quick, only staged files)
print_section "Type checking"
run_command "pnpm type-check" "$TIMESTAMP" \
    "Types are valid" \
    "Type check failed" || exit 1

print_footer 0 