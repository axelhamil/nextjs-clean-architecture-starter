#!/bin/sh

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

BIOME_WARNINGS=0
WARNING_COUNT=0
FILES_FORMATTED=0

# Utility functions
print_header() {
    echo "\n${BOLD}${BLUE}════════════════════════════════════════════${NC}"
    echo "${BOLD}${BLUE}   🔍 PRE-COMMIT CHECKS STARTED${NC}"
    echo "${BOLD}${BLUE}════════════════════════════════════════════${NC}\n"
}

print_section() {
    echo "${CYAN}▶ $1...${NC}"
}

print_success() {
    echo "${GREEN}✓ $1${NC}"
}

print_error() {
    echo "\n${RED}────────────────────────────────────────${NC}"
    echo "${RED}${BOLD}✕ $1${NC}"
    echo "${RED}────────────────────────────────────────${NC}"
    echo "$2\n"
}

print_warning() {
    echo "\n${YELLOW}${BOLD}⚠ $1${NC}\n"
}

print_footer() {
    echo "\n${BOLD}════════════════════════════════════════════${NC}"
    if [ $1 -eq 0 ]; then
        if [ $BIOME_WARNINGS -eq 1 ]; then
            echo "${BOLD}${YELLOW}⚠ ALL PRE-COMMIT CHECKS PASSED WITH WARNINGS${NC}"
            echo "${YELLOW}   $WARNING_COUNT Biome warnings detected. Consider fixing them.${NC}"
        else
            echo "${BOLD}${GREEN}✅ ALL PRE-COMMIT CHECKS PASSED${NC}"
        fi
    else
        echo "${BOLD}${RED}❌ PRE-COMMIT CHECKS FAILED${NC}"
        echo "${RED}Please fix the errors above before committing.${NC}"
        exit 1
    fi
    echo "${BOLD}════════════════════════════════════════════${NC}\n"
}

# Function to run command and capture output
run_command() {
    echo "${CYAN}Running $2...${NC}"
    
    # Execute the command directly to ensure proper output display
    $1
    local exit_code=$?
    
    # Capture output for analysis
    local command_output
    command_output=$($1 2>&1)

    if [ $exit_code -eq 0 ]; then
        print_success "$2"
        return 0
    else
        print_error "$3" "$command_output"
        print_footer 1
        exit 1
    fi
}

# Function to run lint and handle warnings
run_lint_command() {
    echo "${CYAN}Running lint check with Biome...${NC}"
    
    # Run the lint command directly to ensure proper output
    pnpm lint
    local exit_code=$?

    # Capture the lint output for analysis
    local command_output
    command_output=$(pnpm lint 2>&1)

    if [ $exit_code -ne 0 ]; then
        echo "\n${RED}────────────────────────────────────────${NC}"
        echo "${RED}${BOLD}Lint errors detected. Fix them before committing:${NC}"
        echo "${RED}────────────────────────────────────────${NC}"
        echo "$command_output"
        echo "\n"
        print_footer 1
        exit 1
    elif echo "$command_output" | grep -qE "Found [0-9]+ warning"; then
        BIOME_WARNINGS=1
        WARNING_COUNT=$(echo "$command_output" | grep -oE "Found [0-9]+ warning" | awk '{print $2}')
        print_warning "Code lint has warnings: $WARNING_COUNT detected."
        echo "${YELLOW}Detailed lint warnings:${NC}"
        echo "$command_output"
        return 0
    else
        print_success "Code lint is valid"
        return 0
    fi
}

# Start script
print_header

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.ts\|\.tsx\|\.js\|\.jsx\|\.json\|\.md\|\.css\|\.scss\|\.html\|\.yml\|\.yaml$' || true)

if [ -z "$STAGED_FILES" ]; then
    print_warning "No relevant files staged for commit. Skipping checks."
    print_footer 0
    exit 0
fi

# Format check and auto-commit if files were formatted
print_section "Checking code format"
echo "${CYAN}Running format check...${NC}"
pnpm format
if [ $? -ne 0 ]; then
    format_output=$(pnpm format 2>&1)
    print_error "Code formatting failed" "$format_output"
    print_footer 1
    exit 1
fi

if [ -n "$(git diff --name-only)" ]; then
    FILES_FORMATTED=1
    git add .
    git commit --amend --no-edit
    print_success "Code formatted and changes amended to commit"
else
    print_success "Code formatting is valid"
fi

# Lint check with Biome warnings handled
print_section "Checking code lint"
run_lint_command

# Type checking with file listing on error
print_section "Checking types"
echo "${CYAN}Running type check...${NC}"
pnpm type-check
type_check_exit_code=$?

if [ $type_check_exit_code -eq 0 ]; then
    print_success "Types are valid"
else
    type_check_output=$(pnpm type-check 2>&1)
    echo "\n${RED}────────────────────────────────────────${NC}"
    echo "${RED}${BOLD}Type check failed with the following errors:${NC}"
    echo "${RED}────────────────────────────────────────${NC}"
    echo "$type_check_output"
    
    echo "\n${RED}Files with type errors:${NC}"
    echo "$type_check_output" | grep -E "^[^ ]+\.[t|j]sx?:[0-9]+:[0-9]+" | sort | uniq
    print_footer 1
    exit 1
fi

print_footer 0
exit 0
