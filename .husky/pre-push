#!/bin/sh

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

BIOME_WARNINGS=0
TEST_WARNINGS=0

# Get branch name
BRANCH_NAME=$(git symbolic-ref --short HEAD)
PROTECTED_BRANCHES="^(main|master|develop|staging|prod)$"
IS_PROTECTED=0

if echo "$BRANCH_NAME" | grep -Eq "$PROTECTED_BRANCHES"; then
    IS_PROTECTED=1
fi

# Utility functions
print_header() {
    echo "\n${BOLD}${BLUE}════════════════════════════════════════════${NC}"
    echo "${BOLD}${BLUE}   🚀 PRE-PUSH CHECKS STARTED (Branch: ${BRANCH_NAME})${NC}"
    echo "${BOLD}${BLUE}════════════════════════════════════════════${NC}\n"
}

print_section() {
    echo "${CYAN}▶ $1...${NC}"
}

print_success() {
    echo "${GREEN}✓ $1${NC}"
}

print_error() {
    echo "${RED}✕ $1${NC}\n"
    echo "${RED}Command output:${NC}\n$2"
    print_footer 1
    exit 1
}

print_footer() {
    echo "\n${BOLD}════════════════════════════════════════════${NC}"
    if [ $1 -eq 0 ]; then
        echo "${BOLD}${GREEN}✅ ALL PRE-PUSH CHECKS PASSED${NC}"
    else
        echo "${BOLD}${RED}❌ PRE-PUSH CHECKS FAILED${NC}"
    fi
    echo "${BOLD}════════════════════════════════════════════${NC}\n"
}

# Run command and capture output
run_command() {
    local output
    output=$($1 2>&1)
    local exit_code=$?

    if [ $exit_code -eq 0 ]; then
        print_success "$2"
    else
        print_error "$3" "$output"
    fi
}

# Lint check
run_lint() {
    local output
    output=$(pnpm lint 2>&1)
    
    if echo "$output" | grep -q "error"; then
        print_error "[LINT] Errors detected" "$output"
    elif echo "$output" | grep -qE "Found [0-9]+ warning"; then
        BIOME_WARNINGS=1
        if [ $IS_PROTECTED -eq 1 ]; then
            print_error "[LINT] Warnings are not allowed on protected branches" "$output"
        else
            echo "${YELLOW}⚠ [LINT] Warnings detected:${NC}"
            echo "$output"
        fi
    else
        print_success "[LINT] No issues found"
    fi
}

# Test check
run_tests() {
    local output
    output=$(pnpm test 2>&1)
    
    if echo "$output" | grep -q "FAIL"; then
        print_error "[TEST] Some tests failed" "$output"
    elif echo "$output" | grep -qi "warn"; then
        TEST_WARNINGS=1
        if [ $IS_PROTECTED -eq 1 ]; then
            print_error "[TEST] Warnings are not allowed on protected branches" "$output"
        else
            echo "${YELLOW}⚠ [TEST] Warnings detected:${NC}"
            echo "$output"
        fi
    else
        print_success "[TEST] All tests passed"
    fi
}

# Check for uncommitted changes
check_uncommitted() {
    if [ -n "$(git status --porcelain)" ]; then
        print_error "[GIT] Uncommitted changes detected. Commit your changes before pushing."
    fi
}

# Start script
print_header

check_uncommitted

print_section "Checking code format"
run_command "pnpm format" "[FORMAT] Code formatting is valid" "[FORMAT] Formatting issues detected"

print_section "Checking code lint"
run_lint

print_section "Checking types"
run_command "pnpm type-check" "[TYPES] No type errors detected" "[TYPES] Type check failed"

print_section "Running tests"
run_tests

print_section "Building project"
run_command "pnpm build" "[BUILD] Build completed successfully" "[BUILD] Build failed"

print_footer 0
